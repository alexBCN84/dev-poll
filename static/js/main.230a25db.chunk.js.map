{"version":3,"sources":["assets/logo.svg","utils/api.js","utils/constants.js","atoms/info-label/index.js","atoms/card/index.js","components/overview-card/index.js","utils/helpers.js","atoms/headline/index.js","atoms/logo/index.js","components/header/index.js","components/pages/questions/index.js","atoms/button/index.js","components/details-card/index.js","atoms/subline/index.js","components/pages/question-details/index.js","atoms/input/index.js","components/pages/question-form/index.js","components/app/App.js","serviceWorker.js","index.js"],"names":["module","exports","endpointRoot","handleResponse","res","a","json","response","throwError","Object","assign","status","text","checkInput","ok","Promise","reject","result","fetch","console","log","url","headers","method","questionData","body","JSON","stringify","InfoLabel","styled","h2","Card","article","props","questionOverview","css","detailsCard","formCard","OverviewCard","question","published_at","choices","setSelectedQuestion","onChangeRoute","useState","highlighted","setHighlighted","isMOBILE","useDevice","infoLabel","onClick","onMouseEnter","onMouseLeave","date","num","year","slice","month","toMonthLetters","day","ordinalDay","toString","formatDate","length","Headline","h1","StyledLogo","img","StyledTitle","StyledLogoWrapper","div","Logo","src","logo","className","alt","StyledHeader","header","StyledLink","Header","route","link","replace","logoProps","Questions","questions","setQuestions","useEffect","getAllQuestions","then","data","questionCards","map","i","overviewCardProps","key","mobile","tablet","desktop","headerProps","fullWidth","align","Button","button","vote","DetailsCard","selectedChoice","setSelectedChoice","handleChoice","e","target","value","votesArr","votes","percentArr","totalVotes","reduce","b","Math","round","turnIntoPercent","percent","mobileChoicesDisplay","choice","width","type","onChange","name","desktopChoicesDisplay","postVote","Subline","formLabel","QuestionDetails","selectedQuestion","questionDetails","setQuestionDetails","getQuestionDetails","detailsCardProps","Input","input","QuestionForm","setQuestion","firstChoice","setFirstChoice","secondChoice","setSecondChoice","thirdChoice","setThirdChoice","fourthChoice","setFourthChoice","handleOnChangeChoice","as","postQuestion","App","setRoute","questionsProps","questionDetailsProps","questionFormProps","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.230a25db.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.27abda11.svg\";","const endpointRoot = 'https://polls.apiblueprint.org';\n\nasync function handleResponse(res) {\n    const response = await res.json();\n    const throwError = json => Object.assign({}, json, {status: res.status, text: res.text});\n    const checkInput = json => res.ok ? json :  Promise.reject(throwError(json));\n    const result = await checkInput(response);\n    return result;\n  }\n\n// api call to get all the questions on load\nexport async function getAllQuestions(){\n    try {\n        const response = await fetch(`${endpointRoot}/questions?`);\n        return await handleResponse(response);\n    }\n    catch(err) {\n        console.log(err);\n    }\n}\n\n// api call to get one specific question\nexport async function getQuestionDetails(url) {\n    try {\n        const response = await fetch(`${endpointRoot}${url}`);\n        return await handleResponse(response);\n    }\n    catch(err) {\n        console.log(err);\n    }\n}\n\n// api call to update vote\nexport async function postVote(url) {\n    try {\n        const response = await fetch(`${endpointRoot}${url}`,{\n            headers: {},\n            method: 'POST',\n        });\n        return await handleResponse(response);\n    }\n    catch(err) {\n        console.log(err);\n    }\n}\n\n// api call to create new question\nexport async function postQuestion(questionData) {\n    try {\n        const response = await fetch(`${endpointRoot}/questions?`,{\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            method: 'POST',\n            body: JSON.stringify(questionData)\n        });\n        return await handleResponse(response);\n    }catch(err) {\n        console.log(err);\n    }\n}","export const QUESTIONS = 'questions';\nexport const QUESTION_DETAILS = 'question_details';\nexport const QUESTION_FORM = 'ask_a_question';","import styled from 'styled-components';\n\nconst InfoLabel = styled.h2`\n    font-size: 1em;\n    background-color: #ffffff;\n    border-radius: 4px;\n    padding: 10px;\n    width: 50%;\n    margin: 0 auto;\n    border: 1px solid #000000;\n    color: rgba(0, 0, 0, 0.9);\n    cursor: pointer;\n`;\n\nexport default InfoLabel;","import styled, { css } from 'styled-components';\n\nconst Card = styled.article`\n    background-color: rgb(255,248,220, 0.5);\n    width: 100%;\n    box-shadow: 0 6px 20px 0 rgba(0, 0, 0, 0.19);\n    border-radius: 5px;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n\n    ${props =>\n    props.questionOverview &&\n    css`\n        height: 370px;\n        transition: background-color 0.1s, color 0.1s;\n        :hover {\n            background-color: rgba(0, 0, 0, 0.5);\n            color: #ffffff;\n        } \n    `};\n\n    ${props =>\n    (props.detailsCard || props.formCard) &&\n    css`\n        width: 95%;\n        margin: 30px auto;\n        padding-top: 30px;\n    `};\n`;\n\nexport default Card;","import React, {useState} from 'react';\nimport { useDevice } from \"react-use-device\";\n\nimport InfoLabel from '../../atoms/info-label';\nimport Card from '../../atoms/card';\nimport { formatDate } from '../../utils/helpers';\nimport { QUESTION_DETAILS } from '../../utils/constants';\n\nconst OverviewCard = ({question, published_at, choices, url, setSelectedQuestion, onChangeRoute}) => {\n    const [highlighted, setHighlighted] = useState(false)\n    const { isMOBILE } = useDevice();\n    const infoLabel = (\n        <InfoLabel \n            onClick={\n                () => {\n                    onChangeRoute(QUESTION_DETAILS);\n                    setSelectedQuestion(url);\n                }\n                \n            }\n        >\n            {'See choices'}\n        </InfoLabel>);\n\n    return (\n        <Card \n            questionOverview \n            onMouseEnter={() => setHighlighted(true)}\n            onMouseLeave={() => setHighlighted(false)}\n        >\n            <h2>{question}</h2>\n            <p>{ formatDate(published_at) }</p>\n            <p>{`${choices.length} choices available`}</p>\n            {isMOBILE ? infoLabel : highlighted && infoLabel}\n        </Card>\n    )\n}\n\nexport default OverviewCard;","function toOrdinal(num) {\n    num = num.toString();\n    if (num === '11' || num === '12' || num === '13') {\n        return num + 'th';\n    }\n    if (num.slice(-1) === '1') {\n        return num + 'st';\n    }\n    if (num.slice(-1) === '2') {\n        return num + 'nd';\n    }\n    if (num.slice(-1) === '3') {\n        return num + 'rd';\n    }\n    return num + 'th';\n}\n\nfunction toMonthLetters(month) {\n    switch(month) {\n        case '01':\n            return 'January';\n        case '02': \n            return 'February';\n        case '03':\n            return 'March';\n        case '04':\n            return 'April';\n        case '05': \n            return 'May';\n        case '06':\n            return 'June';\n        case '07':\n            return 'July';\n        case '08':\n            return 'August';\n        case '09':\n            return 'September';\n        case '10':\n            return 'October';\n        case '11':\n            return 'November';\n        default:\n            return 'December';\n    }\n}\n\nexport function formatDate(date) {\n    const year = date.slice(0, 4);\n    const month = toMonthLetters(date.slice(5, 7));\n    const day = date.slice(8, 10);\n    const ordinalDay = toOrdinal(day[0] === '0' ? day[1]: day);\n    return `published on ${month} ${ordinalDay}, ${year}`;  \n}\n\nexport function turnIntoPercent(votes) {\n    const totalVotes = votes.reduce((a, b) => a + b);\n    return votes.map(vote =>  vote ? Math.round((vote / totalVotes) * 100 ): 0);\n}","import styled from 'styled-components';\n\nconst Headline = styled.h1`\n    font-weight: 900;\n    margin-left: 40px;\n    font-size: 3.5em;\n    text-align: left;\n    @media (max-width: 768px) {\n        text-align: center;\n        margin: 0;\n    }\n`;\n\nexport default Headline;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport logo from '../../assets/logo.svg';\nimport { QUESTIONS } from '../../utils/constants';\n\nconst StyledLogo = styled.img`\n    height: 100%;\n    pointer-events: none;\n`;\n\nconst StyledTitle = styled.h1`\n    font-size: 4vmin;\n    font-weight: 900;\n    color: #E7F0EF;\n    letter-spacing: 0.1vmin;\n    font-family: Arial, Helvetica, sans-serif;\n    height: 100%;\n    display: inline-block;\n    margin-left: 20px;\n    vertical-align: middle;\n`;\n\nconst StyledLogoWrapper = styled.div`\n    height: 10vmin; \n    display: flex;\n    cursor: pointer;\n\n`;\n\nconst Logo = ({onChangeRoute}) => (\n    <StyledLogoWrapper onClick={() => onChangeRoute(QUESTIONS)}>\n        <StyledLogo src={logo} className=\"app-logo\" alt=\"logo\" />\n        <StyledTitle>{'DEV POLL'}</StyledTitle>\n    </StyledLogoWrapper>\n);\n\nexport default Logo;","import React from 'react';\nimport styled from 'styled-components';\n\nimport Logo from '../../atoms/logo';\n\nconst StyledHeader = styled.header`\n    color: #282c34;\n    padding: 1vmin 2vmin;\n    min-height: 15vh;\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: space-between;\n    font-size: calc(10px + 2vmin);\n`;\n\nconst StyledLink = styled.h2`\n    font-size: 5vmin;\n    cursor: pointer;\n`;\n\nconst Header = ({onChangeRoute, route}) => {\n    const link = route.replace(/_/g, ' ');\n    const logoProps = { onChangeRoute };\n    \n    return (\n        <StyledHeader className=\"app-header\">\n            <Logo {...logoProps}/>\n            <StyledLink onClick={() => onChangeRoute(route)}>{link}</StyledLink>\n        </StyledHeader>\n    );\n}\n\nexport default Header;","import React, { useEffect, useState } from 'react';\nimport {Grid, Row, Col} from 'react-grid-lib';\n\nimport { \n    getAllQuestions, \n} from '../../../utils/api';\nimport { QUESTION_FORM } from '../../../utils/constants';\n\nimport OverviewCard from '../../overview-card';\nimport Headline from '../../../atoms/headline';\nimport Header from '../../../components/header';\n\nexport default function Questions(props) {\n    const [questions, setQuestions] = useState([]);\n\n    useEffect(()=> {\n        getAllQuestions().then(data => setQuestions(data));\n    },[])\n    \n    const questionCards = questions.map((question, i) => {\n        const overviewCardProps = {...props, ...question}\n        return (\n            <Col key={i} mobile={12} tablet={6} desktop={4}> \n                <OverviewCard {...overviewCardProps}/>\n            </Col>\n        )\n    });\n\n    const { onChangeRoute } = props;\n    const headerProps = {route: QUESTION_FORM, onChangeRoute};\n    \nreturn (\n    <>\n        <Header {...headerProps}/>\n        <Headline>{'Questions'}</Headline>\n        <Grid fullWidth>\n            <Row align=\"left\">{questionCards}</Row>\n        </Grid>\n    </>\n    )\n}","import styled, { css } from 'styled-components';\n\nconst Button = styled.button`\n    width: 20%;\n    min-width: 150px;\n    height: 35px;\n    margin: 25px auto;\n    background-color: rgba(0, 0, 0, 0.1);\n    border: 2px solid #000;\n    border-radius: 4px;\n    font-weight: 900;\n    font-size: 1.2em;\n    cursor: pointer;\n    :hover {\n        background-color: rgba(0, 0, 0, 0.5);\n        color: #fff;\n    }\n\n    ${props =>\n    props.vote &&\n    css`\n        width: 10%;\n        min-width: 150px;\n    `};\n`;\n\nexport default Button;","import React, { useState } from 'react';\nimport {Grid, Row, Col} from 'react-grid-lib';\nimport { useDevice } from \"react-use-device\";\n\nimport Card from '../../atoms/card';\nimport { turnIntoPercent } from '../../utils/helpers';\nimport Button from '../../atoms/button';\nimport { postVote } from '../../utils/api';\nimport { QUESTIONS } from '../../utils/constants';\n\nconst DetailsCard = ({choices, onChangeRoute}) => {\n    const [selectedChoice, setSelectedChoice] = useState(null)\n    const { isMOBILE } = useDevice();\n\n    function handleChoice(e) {\n        setSelectedChoice(e.target.value)\n    }\n\n    if (!!choices) {\n        const votesArr = choices && choices.map(({votes}) => votes);\n        const percentArr = votesArr && turnIntoPercent(votesArr);\n    \n        for (let i = 0; i < percentArr.length; i++) {\n            choices[i].percent = percentArr[i];\n        }\n    }\n\n    const mobileChoicesDisplay = (\n        <form>\n            {\n                choices && choices.map(({choice, votes, percent, url}, i) => {\n                    return (\n                    <Card detailsCard key={i}> \n                        <Grid>\n                            <Row>\n                                <Col width={12}>{`choice: ${choice}`}</Col>\n                                <Col width={12}>{`votes: ${votes}`}</Col>\n                                <Col width={12}>{`percent: ${percent}%`}</Col>\n                                <Col width={12}>{'vote this option '}<input type=\"radio\" onChange={handleChoice} value={url} name=\"vote\"/></Col>\n                            </Row>\n                        </Grid>\n                    </Card>\n                    );\n                })\n            }\n        </form>\n    );\n\n    const desktopChoicesDisplay = (\n        <Card detailsCard>\n            <form>\n                <ul>{choices && choices.map(({choice, votes, percent, url}, i) => \n                    <li key={i}>\n                        <Grid>\n                            <Row align=\"left\">\n                                <Col width={5}>{choice}</Col>\n                                <Col width={4}>{`${votes} votes`}</Col>\n                                <Col width={2}>{`${percent}%`}</Col>\n                                <Col width={1}><input type=\"radio\" onChange={handleChoice} value={url} name=\"vote\"/></Col>\n                            </Row>\n                        </Grid>\n                    </li>\n                )}\n                </ul>\n            </form>\n        </Card> \n    );\n\n    return (\n        <>\n            {isMOBILE ? mobileChoicesDisplay : desktopChoicesDisplay}\n            <Button vote onClick={() => {\n                postVote(selectedChoice).then(data => {\n                    onChangeRoute(QUESTIONS);\n                });\n                \n            }}>Vote</Button>\n        </>\n    )\n}\n\nexport default DetailsCard;","import styled, {css} from 'styled-components';\n\nconst Subline = styled.h2`\n    font-weight: 600;\n    color: #586F72;\n    margin-left: 40px;\n    font-size: 2.5em;\n    text-align: left;\n    @media (max-width: 768px) {\n    text-align: center;\n    margin: 0;\n  }\n\n  ${props =>\n    props.formLabel &&\n    css`\n        font-size: 3vmin;\n        text-align: center;\n    `};\n`;\n\nexport default Subline;\n","import React, { useEffect, useState } from 'react';\n\nimport { \n    getQuestionDetails, \n} from '../../../utils/api';\nimport { QUESTION_FORM } from '../../../utils/constants';\n\nimport DetailsCard from '../../details-card';\nimport Headline from '../../../atoms/headline';\nimport Subline from '../../../atoms/subline';\nimport Header from '../../../components/header';\n\nexport default function QuestionDetails({onChangeRoute, selectedQuestion}) {\n    const [questionDetails, setQuestionDetails] = useState({});\n\n    useEffect(()=> {\n        getQuestionDetails(selectedQuestion).then(data => setQuestionDetails(data));\n    }, [selectedQuestion,setQuestionDetails])\n\n    const { question, choices } = questionDetails;\n    const detailsCardProps = {choices, onChangeRoute}\n\n    const headerProps = {route: QUESTION_FORM, onChangeRoute};\n    \n    return (\n        <>\n            <Header {...headerProps}/>\n            <Headline>{'Question Details'}</Headline>\n            <Subline>{`Question: ${question}`}</Subline>\n            {<DetailsCard {...detailsCardProps}/>}\n        </>\n    )\n    \n}","import styled from 'styled-components';\n\nconst Input = styled.input`\n    width: 40%;\n    height: 25px;\n    min-width: 200px;\n    margin: 10px auto;\n    border: 1px solid #000;\n    border-radius: 2px;\n    padding-left: 10px;\n    :focus {\n        background-color: rgba(0, 0, 0, 0.5);\n        color: #fff;\n        font-weight: bolder;\n    }\n`\n\nexport default Input","import React, { useState } from 'react';\n\nimport { QUESTIONS } from '../../../utils/constants';\nimport { postQuestion } from '../../../utils/api';\n\nimport Headline from '../../../atoms/headline';\nimport Subline from '../../../atoms/subline';\nimport Header from '../../../components/header';\nimport Card from '../../../atoms/card';\nimport Button from '../../../atoms/button';\nimport Input from '../../../atoms/input';\n\nexport default function QuestionForm({onChangeRoute}) {\n    const [question, setQuestion] = useState('');\n    const [firstChoice, setFirstChoice] = useState('');\n    const [secondChoice, setSecondChoice] = useState('');\n    const [thirdChoice, setThirdChoice] = useState('');\n    const [fourthChoice, setFourthChoice] = useState('');\n\n    function handleOnChangeQuestion(e) {\n        setQuestion(e.target.value);\n    }\n\n    function handleOnChangeChoice(e) {\n        switch(e.target.name) {\n            case 'first-choice':\n                return setFirstChoice(e.target.value);\n            case 'second-choice':\n                return setSecondChoice(e.target.value);\n            case 'third-choice':\n                return setThirdChoice(e.target.value);\n            case 'fourth-choice':\n                return setFourthChoice(e.target.value);\n            default:\n                return null;\n        }\n    }\n\n    function submit() {\n        const data = {\n            question,\n            choices: [firstChoice, secondChoice, thirdChoice, fourthChoice]\n        }\n        postQuestion(data).then(data => {\n            console.log(data)\n            onChangeRoute(QUESTIONS);\n        });\n    }\n\n    const headerProps = {route: QUESTIONS, onChangeRoute};\n\n    return (\n        <>\n            <Header {...headerProps}/>\n            <Headline>{'Ask a question'}</Headline>\n            <form>\n                <Card formCard>\n                    <Subline as=\"label\" formLabel>{'Enter your question'}</Subline>\n                    <Input type=\"text\" onChange={handleOnChangeQuestion} value={question} />\n                    <br/>\n                    <Subline as=\"label\" formLabel>{'Add first choice'}</Subline>\n                    <Input type=\"text\" name=\"first-choice\" onChange={handleOnChangeChoice} value={firstChoice}/>\n                    <Subline as=\"label\"  formLabel>{'Add second choice'}</Subline>\n                    <Input type=\"text\" name=\"second-choice\"onChange={handleOnChangeChoice} value={secondChoice} />\n                    <Subline as=\"label\" formLabel>{'Add third choice'}</Subline>\n                    <Input type=\"text\" name=\"third-choice\" onChange={handleOnChangeChoice} value={thirdChoice} />\n                    <Subline as=\"label\" formLabel>{'Add fourth choice'}</Subline>\n                    <Input type=\"text\" name=\"fourth-choice\" onChange={handleOnChangeChoice} value={fourthChoice} />\n                    <Button onClick={submit}>{'Submit'}</Button>\n                </Card>\n            </form>\n            \n        </>\n    )  \n}\n","import React, { useState } from 'react';\n\nimport Questions from '../pages/questions';\nimport QuestionDetails from '../pages/question-details';\nimport QuestionForm from '../pages/question-form';\nimport { QUESTIONS, QUESTION_DETAILS, QUESTION_FORM } from '../../utils/constants';\n\nimport './App.css';\n\nfunction App() {\n  const [route, setRoute] = useState(QUESTIONS);\n  const [selectedQuestion, setSelectedQuestion] = useState(null);\n\n  function onChangeRoute(route) {\n    setRoute(route);\n  }\n  \n  const questionsProps = {\n    onChangeRoute,\n    setSelectedQuestion\n  }\n  const questionDetailsProps = {\n    onChangeRoute,\n    selectedQuestion\n  }\n\n  const questionFormProps = {\n    onChangeRoute\n  }\n\n  return (\n    <div className=\"app\">\n      { route === QUESTIONS && <Questions {...questionsProps}/> }\n      { route === QUESTION_DETAILS && <QuestionDetails {...questionDetailsProps}/> }\n      { route === QUESTION_FORM && <QuestionForm {...questionFormProps}/> }\n      <footer>\n        {'Powered by'}\n        <a href=\" http://docs.pollsapi.apiary.io/\" alt=\"polls api\">\n            {' Polls API'}\n        </a>\n    </footer>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}